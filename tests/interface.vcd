$date
	Fri Apr 25 18:13:17 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1ps
$end
$scope module dut_test $end
$var wire 1 ! CLK $end
$var wire 1 " RST_N $end
$var wire 3 # read_address [2:0] $end
$var wire 1 $ read_en $end
$var wire 1 % read_rdy $end
$var wire 3 & write_address [2:0] $end
$var wire 1 ' write_data $end
$var wire 1 ( write_en $end
$var wire 1 ) write_rdy $end
$var wire 1 * read_data $end
$scope module uut $end
$var wire 1 ! CLK $end
$var wire 1 " RST_N $end
$var wire 1 + \a_data$whas $end
$var wire 1 , \a_ff$CLR $end
$var wire 1 - \a_ff$DEQ $end
$var wire 1 . \a_ff$D_IN $end
$var wire 1 / \a_ff$ENQ $end
$var wire 1 0 \b_data$whas $end
$var wire 1 1 \b_ff$CLR $end
$var wire 1 2 \b_ff$DEQ $end
$var wire 1 3 \b_ff$D_IN $end
$var wire 1 4 \b_ff$ENQ $end
$var wire 1 5 \pwyff_deq$whas $end
$var wire 3 6 read_address [2:0] $end
$var wire 1 $ read_en $end
$var wire 1 % read_rdy $end
$var wire 3 7 write_address [2:0] $end
$var wire 1 ' write_data $end
$var wire 1 ( write_en $end
$var wire 1 ) write_rdy $end
$var wire 1 8 \y_ff$CLR $end
$var wire 1 9 \y_ff$DEQ $end
$var wire 1 : \y_ff$D_IN $end
$var wire 1 ; \y_ff$ENQ $end
$var wire 1 < \y_ff$FULL_N $end
$var wire 1 = \y_ff$EMPTY_N $end
$var wire 1 > \y_ff$D_OUT $end
$var wire 1 ? \b_ff$FULL_N $end
$var wire 1 @ \b_ff$EMPTY_N $end
$var wire 1 A \b_ff$D_OUT $end
$var wire 1 B \a_ff$FULL_N $end
$var wire 1 C \a_ff$EMPTY_N $end
$var wire 1 D \a_ff$D_OUT $end
$var reg 1 * read_data $end
$scope module a_ff $end
$var wire 1 ! CLK $end
$var wire 1 , CLR $end
$var wire 1 - DEQ $end
$var wire 1 . D_IN $end
$var wire 1 C EMPTY_N $end
$var wire 1 / ENQ $end
$var wire 1 B FULL_N $end
$var wire 1 " RST $end
$var wire 1 E d0d1 $end
$var wire 1 F d0di $end
$var wire 1 G d0h $end
$var wire 1 H d1di $end
$var wire 1 D D_OUT $end
$var reg 1 D data0_reg $end
$var reg 1 I data1_reg $end
$var reg 1 J empty_reg $end
$var reg 1 K full_reg $end
$scope begin error_checks $end
$var reg 1 L deqerror $end
$var reg 1 M enqerror $end
$upscope $end
$upscope $end
$scope module b_ff $end
$var wire 1 ! CLK $end
$var wire 1 1 CLR $end
$var wire 1 2 DEQ $end
$var wire 1 3 D_IN $end
$var wire 1 @ EMPTY_N $end
$var wire 1 4 ENQ $end
$var wire 1 " RST $end
$var wire 1 ? FULL_N $end
$var reg 1 A D_OUT $end
$var reg 1 N empty_reg $end
$scope begin error_checks $end
$var reg 1 O deqerror $end
$var reg 1 P enqerror $end
$upscope $end
$upscope $end
$scope module y_ff $end
$var wire 1 ! CLK $end
$var wire 1 8 CLR $end
$var wire 1 9 DEQ $end
$var wire 1 : D_IN $end
$var wire 1 > D_OUT $end
$var wire 1 = EMPTY_N $end
$var wire 1 ; ENQ $end
$var wire 1 < FULL_N $end
$var wire 1 " RST $end
$var wire 1 Q d0d1 $end
$var wire 1 R d0di $end
$var wire 1 S d0h $end
$var wire 1 T d1di $end
$var reg 1 U data0_reg $end
$var reg 1 V data1_reg $end
$var reg 1 W empty_reg $end
$var reg 1 X full_reg $end
$scope begin error_checks $end
$var reg 1 Y deqerror $end
$var reg 1 Z enqerror $end
$upscope $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
0Z
0Y
1X
0W
0V
0U
0T
1S
0R
0Q
0P
0O
0N
0M
0L
1K
0J
0I
0H
xG
xF
0E
xD
0C
1B
0A
0@
1?
0>
0=
1<
0;
x:
09
08
bz 7
bz 6
x5
x4
z3
02
01
x0
x/
z.
0-
0,
x+
0*
1)
z(
z'
bz &
1%
z$
bz #
0"
1!
$end
#5000
0!
#10000
1"
1!
#15000
0!
#20000
0G
1F
1/
04
1+
00
b100 &
b100 7
1.
13
1'
1(
1!
#25000
0!
#30000
0/
14
0+
10
b101 &
b101 7
1G
0F
1:
0H
1D
1C
1J
1!
#35000
0!
#40000
00
0(
0S
1R
04
1;
12
1-
0?
1@
1N
1A
1!
#45000
0!
#50000
15
b11 #
b11 6
1$
1S
0R
19
1*
0;
02
0-
1>
1U
1=
1W
1?
0@
0N
0C
0J
1!
#55000
0!
#60000
05
b0 #
b0 6
0$
1*
09
0=
0W
1!
#65000
0!
#70000
b1 #
b1 6
1!
#75000
0!
#80000
0*
b10 #
b10 6
1!
#85000
0!
#90000
1!
#90001
